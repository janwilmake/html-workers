//@ts-check
/// <reference lib="esnext" />
/// <reference types="@cloudflare/workers-types" />

import worker from './worker.js';

export default {
  /** @param {Request} request @param {any} env @param {ExecutionContext} ctx @returns {Promise<Response>} */
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    
    // For HTML requests (root path), inject server data
    if (url.pathname === '/' && request.headers.get('accept')?.includes('text/html')) {
      try {
        // Get server data by calling worker
        ctx.html = "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            padding: 20px;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            overflow: hidden;\n        }\n\n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 30px;\n            text-align: center;\n        }\n\n        .header h1 {\n            font-size: 2.5em;\n            margin-bottom: 10px;\n        }\n\n        .stats {\n            font-size: 0.9em;\n            opacity: 0.9;\n        }\n\n        .add-todo {\n            padding: 30px;\n            border-bottom: 1px solid #eee;\n        }\n\n        .todo-form {\n            display: flex;\n            gap: 10px;\n        }\n\n        .todo-input {\n            flex: 1;\n            padding: 12px 16px;\n            border: 2px solid #e1e5e9;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: border-color 0.3s ease;\n        }\n\n        .todo-input:focus {\n            outline: none;\n            border-color: #667eea;\n        }\n\n        .add-btn {\n            padding: 12px 24px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: transform 0.2s ease;\n        }\n\n        .add-btn:hover {\n            transform: translateY(-1px);\n        }\n\n        .add-btn:active {\n            transform: translateY(0);\n        }\n\n        .filters {\n            padding: 20px 30px;\n            border-bottom: 1px solid #eee;\n            display: flex;\n            gap: 10px;\n            justify-content: center;\n        }\n\n        .filter-btn {\n            padding: 8px 16px;\n            border: 2px solid #e1e5e9;\n            background: white;\n            border-radius: 20px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-size: 14px;\n        }\n\n        .filter-btn.active {\n            background: #667eea;\n            color: white;\n            border-color: #667eea;\n        }\n\n        .todo-list {\n            min-height: 200px;\n        }\n\n        .todo-item {\n            padding: 20px 30px;\n            border-bottom: 1px solid #f0f0f0;\n            display: flex;\n            align-items: center;\n            gap: 15px;\n            transition: background-color 0.3s ease;\n        }\n\n        .todo-item:hover {\n            background-color: #f8f9fa;\n        }\n\n        .todo-item.completed {\n            opacity: 0.6;\n        }\n\n        .todo-checkbox {\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #e1e5e9;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .todo-checkbox.checked {\n            background: #667eea;\n            border-color: #667eea;\n        }\n\n        .todo-checkbox.checked::after {\n            content: '‚úì';\n            color: white;\n            font-size: 12px;\n            font-weight: bold;\n        }\n\n        .todo-text {\n            flex: 1;\n            font-size: 16px;\n            transition: all 0.3s ease;\n        }\n\n        .todo-item.completed .todo-text {\n            text-decoration: line-through;\n        }\n\n        .todo-date {\n            font-size: 12px;\n            color: #666;\n        }\n\n        .delete-btn {\n            background: #ff4757;\n            color: white;\n            border: none;\n            padding: 6px 12px;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 12px;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n\n        .todo-item:hover .delete-btn {\n            opacity: 1;\n        }\n\n        .empty-state {\n            text-align: center;\n            padding: 60px 30px;\n            color: #666;\n        }\n\n        .empty-state svg {\n            width: 80px;\n            height: 80px;\n            margin-bottom: 20px;\n            opacity: 0.5;\n        }\n\n        @media (max-width: 640px) {\n            .container {\n                margin: 0;\n                border-radius: 0;\n            }\n\n            .todo-form {\n                flex-direction: column;\n            }\n\n            .filters {\n                flex-wrap: wrap;\n            }\n        }\n    </style>\n\n    \n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>üìù Todo List</h1>\n            <div class=\"stats\">\n                <span id=\"stats-text\">Loading...</span>\n            </div>\n        </div>\n\n        <div class=\"add-todo\">\n            <form class=\"todo-form\" id=\"todo-form\">\n                <input type=\"text\" class=\"todo-input\" id=\"todo-input\" placeholder=\"What needs to be done?\" required>\n                <button type=\"submit\" class=\"add-btn\">Add Todo</button>\n            </form>\n        </div>\n\n        <div class=\"filters\">\n            <button class=\"filter-btn active\" data-filter=\"all\">All</button>\n            <button class=\"filter-btn\" data-filter=\"active\">Active</button>\n            <button class=\"filter-btn\" data-filter=\"completed\">Completed</button>\n        </div>\n\n        <div class=\"todo-list\" id=\"todo-list\">\n            <div class=\"empty-state\" id=\"empty-state\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path\n                        d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\" />\n                </svg>\n                <h3>No todos yet</h3>\n                <p>Add your first todo above to get started!</p>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Dummy data for file:// development\n        const dummyData = {\n            todos: [\n                {\n                    id: '1',\n                    text: 'Learn about HTML Workers',\n                    completed: false,\n                    createdAt: new Date().toISOString()\n                },\n                {\n                    id: '2',\n                    text: 'Build a todo app',\n                    completed: true,\n                    createdAt: new Date(Date.now() - 86400000).toISOString()\n                }\n            ],\n            stats: {\n                total: 2,\n                completed: 1,\n                remaining: 1\n            }\n        };\n\n        // Use server data when available, fallback to dummy data\n        const initialData = window.serverData || dummyData;\n\n        // App state\n        let todos = initialData.todos;\n        let currentFilter = 'all';\n\n        // DOM elements\n        const todoForm = document.getElementById('todo-form');\n        const todoInput = document.getElementById('todo-input');\n        const todoList = document.getElementById('todo-list');\n        const emptyState = document.getElementById('empty-state');\n        const statsText = document.getElementById('stats-text');\n        const filterBtns = document.querySelectorAll('.filter-btn');\n\n        // Initialize app\n        function init() {\n            updateStats();\n            renderTodos();\n            setupEventListeners();\n        }\n\n        function setupEventListeners() {\n            // Add todo form\n            todoForm.addEventListener('submit', async (e) => {\n                e.preventDefault();\n                const text = todoInput.value.trim();\n                if (!text) return;\n\n                try {\n                    if (window.serverData) {\n                        // Server-side: make API call\n                        const response = await fetch('/api/todos', {\n                            method: 'POST',\n                            headers: { 'content-type': 'application/json' },\n                            body: JSON.stringify({ text })\n                        });\n\n                        if (response.ok) {\n                            const newTodo = await response.json();\n                            todos.unshift(newTodo);\n                        }\n                    } else {\n                        // Client-side: add to local state\n                        const newTodo = {\n                            id: Date.now().toString(),\n                            text,\n                            completed: false,\n                            createdAt: new Date().toISOString()\n                        };\n                        todos.unshift(newTodo);\n                    }\n\n                    todoInput.value = '';\n                    updateStats();\n                    renderTodos();\n                } catch (error) {\n                    console.error('Failed to add todo:', error);\n                }\n            });\n\n            // Filter buttons\n            filterBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    filterBtns.forEach(b => b.classList.remove('active'));\n                    btn.classList.add('active');\n                    currentFilter = btn.dataset.filter;\n                    renderTodos();\n                });\n            });\n        }\n\n        async function toggleTodo(todoId) {\n            const todo = todos.find(t => t.id === todoId);\n            if (!todo) return;\n\n            const newCompleted = !todo.completed;\n\n            try {\n                if (window.serverData) {\n                    // Server-side: make API call\n                    const response = await fetch(`/api/todos/${todoId}`, {\n                        method: 'PATCH',\n                        headers: { 'content-type': 'application/json' },\n                        body: JSON.stringify({ completed: newCompleted })\n                    });\n\n                    if (response.ok) {\n                        todo.completed = newCompleted;\n                    }\n                } else {\n                    // Client-side: update local state\n                    todo.completed = newCompleted;\n                }\n\n                updateStats();\n                renderTodos();\n            } catch (error) {\n                console.error('Failed to toggle todo:', error);\n            }\n        }\n\n        async function deleteTodo(todoId) {\n            try {\n                if (window.serverData) {\n                    // Server-side: make API call\n                    const response = await fetch(`/api/todos/${todoId}`, {\n                        method: 'DELETE'\n                    });\n\n                    if (response.ok) {\n                        todos = todos.filter(t => t.id !== todoId);\n                    }\n                } else {\n                    // Client-side: update local state\n                    todos = todos.filter(t => t.id !== todoId);\n                }\n\n                updateStats();\n                renderTodos();\n            } catch (error) {\n                console.error('Failed to delete todo:', error);\n            }\n        }\n\n        function updateStats() {\n            const total = todos.length;\n            const completed = todos.filter(t => t.completed).length;\n            const remaining = total - completed;\n\n            statsText.textContent = `${total} total ‚Ä¢ ${completed} completed ‚Ä¢ ${remaining} remaining`;\n        }\n\n        function formatDate(dateString) {\n            const date = new Date(dateString);\n            const now = new Date();\n            const diffMs = now - date;\n            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n            if (diffDays === 0) return 'Today';\n            if (diffDays === 1) return 'Yesterday';\n            if (diffDays < 7) return `${diffDays} days ago`;\n            return date.toLocaleDateString();\n        }\n\n        function getFilteredTodos() {\n            switch (currentFilter) {\n                case 'active':\n                    return todos.filter(t => !t.completed);\n                case 'completed':\n                    return todos.filter(t => t.completed);\n                default:\n                    return todos;\n            }\n        }\n\n        function renderTodos() {\n            const filteredTodos = getFilteredTodos();\n\n            if (filteredTodos.length === 0) {\n                todoList.innerHTML = `\n                    <div class=\"empty-state\">\n                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                            <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\"/>\n                        </svg>\n                        <h3>${currentFilter === 'all' ? 'No todos yet' : `No ${currentFilter} todos`}</h3>\n                        <p>${currentFilter === 'all' ? 'Add your first todo above to get started!' : `You have no ${currentFilter} todos.`}</p>\n                    </div>\n                `;\n                return;\n            }\n\n            todoList.innerHTML = filteredTodos.map(todo => `\n                <div class=\"todo-item ${todo.completed ? 'completed' : ''}\">\n                    <div class=\"todo-checkbox ${todo.completed ? 'checked' : ''}\" onclick=\"toggleTodo('${todo.id}')\"></div>\n                    <div class=\"todo-text\">${todo.text}</div>\n                    <div class=\"todo-date\">${formatDate(todo.createdAt)}</div>\n                    <button class=\"delete-btn\" onclick=\"deleteTodo('${todo.id}')\">Delete</button>\n                </div>\n            `).join('');\n        }\n\n        // Make functions global for onclick handlers\n        window.toggleTodo = toggleTodo;\n        window.deleteTodo = deleteTodo;\n\n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', init);\n        } else {\n            init();\n        }\n\n        // Set page title immediately\n        document.title = `Todo List (${initialData.stats.remaining} remaining)`;\n\n        console.log('Todo app initialized with data:', initialData);\n    </script>\n</body>\n\n</html>";

        const serverResponse = await worker.fetch(request, env, ctx);
        
        if (serverResponse.headers.get('content-type')?.includes('application/json')) {
          const serverData = await serverResponse.json();          
          // Inject server data in head
          let htmlContent = ctx.html.replace(
            '</head>',
            `  <script>window.serverData = ${JSON.stringify(serverData)};</script>
</head>`
          );
          
          return new Response(htmlContent, {
            headers: { 'content-type': 'text/html; charset=utf-8' }
          });
        }
        
        // If server doesn't return JSON, return server response as-is
        return serverResponse;
      } catch (error) {
        console.error('Server error:', error);
        return new Response('Server Error', { status: 500 });
      }
    }
    
    // For other requests, pass to worker
    return worker.fetch(request, env, ctx);
  },
};
